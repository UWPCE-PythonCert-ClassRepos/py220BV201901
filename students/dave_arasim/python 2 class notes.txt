regular git cycle:
git pull upstream master
git push origin master

----------------------------------------------------------------------------
Will use 'Slack' for class communication

----------------------------------------------------------------------------
py220BV201901 is the repository

need to commit often, as we will be graded on this

Class team:
dave
ying
arun

----------------------------------------------------------------------------
use pylint to critique your code:
python -m pylint ./inventory_management

create pylint rcfile:
pylint --generate-rcfile > .pylintrc

can edit this file to exclude certain errors (ex: too-few-public-methods).
Add errors to 'disable' statement in the .pylintrc entry

----------------------------------------------------------------------------
Check for testing coverage:
python -m coverage run --source=inventory_management -m unittest test_unit.py
python -m coverage report

----------------------------------------------------------------------------
Use pytest if you can.

Virtual environments allow you to emulate your client's environment if it's not like your own:
python3 -m venv venv
source venv/bin/activate   --> activates virtual env
deactivate                 --> deactivates virtual env

pip freeze  --> shows your environment's modules versions

pip install -r requirements.txt   --> gets requirements.txt file


can stack git commands with && in between AND it will not continue if previous one fails.

use fstrings when you can:
first = 'dave'
last = 'arasim'
print(f"My name is {first} {last}")

Try loguru for logging in python for easier logging.

Add password info. files to .gitignore entry, so they won't be propagated into the repository.

--------------------------------------------------------------------------------------------------

/c/gitroot/py220BV201901/students/dave_arasim/lesson02/assignment/code

--------------------------------------------------------------------------------------------------

python -c "import sys; print(sys.path)"

set PYTHONPATH=.

python -m pytest -v test_unit.py

------------------------------------------------------------
Lesson 3
SQL stuff:

pip install peewee then...

python class is like a table and peewee maps classes to tables:
from peewee import *

class BaseModel(Model):  <--- inherits Model from peewee
    class Meta:
        database = SqliteDatabase('personjob.db')  <-- knows how to talk to sqlite database
                                                       on disk called 'personjob.db'

class Person(BaseModel):
    person_name = CharField(primary_key = True, max_length = 30)
    town...
    nickname...

    def show(this):
        print(this.person_name, ....)

class Job(BaseModel):
    ...

use sqlitetutorial.net to install sqlite!!

============================================================================================
1/30/19:
MongoDB - new database to be used in this class (noSQL database: 'schema-less')

============================================================================================
2/06/19:
python -m cProfile <python program name>
Allows timing for optimization

Look at e-mail from Andy for 'mocking' technique.  There is a tutorial he sent last Wed or so (1/30)

www.dbader.org/blog/python-memoization for 'memoization' (cache) examples.

Make sure to close database BEFORE the returns in basic_operations.py!!

Give feedback to Andy!

============================================================================================
2/13/19:
Using MongoDB for lesson 5...see e-mail examples

